              lettuce 4.0.Beta1 RELEASE NOTES

This release features Unix domain sockets on linux-x86_64 systems. Local connections to a Redis
instance are now possible without the use of the network. A second feature with a huge impact is client options.
Client options allow to control behavior on a fine-grained base. It is now possible to turn off auto-reconnect,
validate the connection with a PING before activating the connection for client usage and many more.

We tested lettuce using YourKit for performance. Subtracting all IO, the most time is spent on constructing the return
futures and command objects. The async API can issue about 300Kops/sec whereas the sync API performs
about 13Kops/sec (GET's, PING's) on a single thread.
Sync performance depends on the Redis performance (tested on a Mac, 2,7 GHz Intel Core i7).

lettuce provides now also base functionality for building clients using the Redis protocol.
An example is spinach (https://github.com/mp911de/spinach).

lettuce 4.0 is built with Java 8 and cannot be used with Java 6 or 7.

If you need any support, meet lettuce at https://gitter.im/mp911de/lettuce


Rearchitecting the API
-----
Lettuce provides right from the start two API's: Sync and async. Now comes a third one: Reactive. Behind the scenes, all commands are
executed using netty and it does not really matter, from which API you come. But the connection ressources (sockets, events)
were bound to a particular API. If one wanted to use sync calls for a certain scenario, he had to create another connection to redis.

This coupling is loosed now. By calling `connect()` you will no longer get a synchronous connection, you will get a `StatefulRedisConnection`
with the access to the sync, async and reactive interface.

3.x code:
```java
RedisConnection connection = client.connect();
```

4.x code:
```java
StatefulRedisConnection stateful = client.connect();
RedisConnection connection = stateful.sync();
```

The other `connect` methods like `connectAsync` and `connectSentinelAsync` will remain unchanged.

Affected `connect` methods are:

* `RedisClient.connect` (provides a `StatefulRedisConnection`)
* `RedisClient.connectPubSub` (provides a `StatefulRedisPubSubConnection`)
* `RedisClusterClient.connect` (provides a `StatefulRedisClusterConnection`)

New connect methods:

* `RedisClient.connectSentinel` (provides a `StatefulRedisSentinelConnection`)

Moving segregated API interfaces to own packages
-----
Starting with reactive API's, another 13 interfaces will be provided with lettuce. This increases the count of
types within the `com.lambdaworks.redis` package and the package gets messier again. Therefore the segregated interfaces
are relocated to own packages.

All segregated API interfaces are moved from `com.lambdaworks.redis` to `com.lambdaworks.redis.api.(sync|async|rx)`

You need to adjust your code to access those interfaces. So if you used `com.lambdaworks.redis.RedisListsAsyncConnection`
you need to drop the import to `com.lambdaworks.redis.RedisListsAsyncConnection` and import `com.lambdaworks.redis.api.async.RedisListsAsyncConnection`
instead.

### Migration Matrix sync API:

3.x package: `com.lambdaworks.redis`
4.x package: `com.lambdaworks.redis.api.sync`


Affected interfaces:

* BaseRedisConnection
* RedisHashesConnection
* RedisHLLConnection
* RedisKeysConnection
* RedisListsConnection
* RedisScriptingConnection
* RedisServerConnection
* RedisSetsConnection
* RedisSortedSetsConnection
* RedisStringsConnection
* RedisTransactionalConnection


### Migration Matrix async API:

3.x package: `com.lambdaworks.redis`
4.x package: `com.lambdaworks.redis.api.async`


Affected interfaces:

* BaseRedisAsyncConnection
* RedisHashesAsyncConnection
* RedisHLLAsyncConnection
* RedisKeysAsyncConnection
* RedisListsAsyncConnection
* RedisScriptingAsyncConnection
* RedisSentinelAsyncConnection
* RedisServerAsyncConnection
* RedisSetsAsyncConnection
* RedisSortedSetsAsyncConnection
* RedisStringsAsyncConnection
* RedisTransactionalAsyncConnection

*API Changes*

* readOnly and readWrite changed from `String` return type to `RedisFuture<String>`. The connection state is maintained by the future completion.


### New interfaces providing observable commands:

4.x package: `com.lambdaworks.redis.api.rx`

New interfaces:

* BaseRedisRxConnection
* RedisHashesRxConnection
* RedisHLLRxConnection
* RedisKeysRxConnection
* RedisListsRxConnection
* RedisScriptingRxConnection
* RedisSentinelRxConnection
* RedisServerRxConnection
* RedisSetsRxConnection
* RedisSortedSetsRxConnection
* RedisStringsRxConnection
* RedisTransactionalRxConnection

Enhancements
-----


Fixes
-----

Other
------


lettuce requires a minimum of Java 8 to build and run. It is tested continuously against Redis 3.0.

For complete information on lettuce see the websites:

* http://github.com/mp911de/lettuce
* http://redis.paluch.biz.