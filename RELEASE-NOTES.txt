              lettuce 4.0.Beta1 RELEASE NOTES

TBD.
- Stateful Connections
- Sync interface for PubSub
- Advanced cluster API
- Switch to Java 8 and drop 6+7 support
- Deprecate connection API's and use command apis


lettuce 4.0 is needs Java 8 and cannot be used with Java 6 or 7.

If you need any support, meet lettuce at https://gitter.im/mp911de/lettuce


Rearchitecting the API
-----
Lettuce provides right from the start two API's: Sync and async. Now comes a third one: Reactive. Behind the scenes, all commands are
executed using netty and it does not really matter, from which API you come. But the connection resources (sockets, events)
were bound to a particular API. If one wanted to use sync calls for a certain scenario, he had to create another connection to redis.

This coupling is loosed now. By calling `connect()` you will no longer get a synchronous connection, you will get a `StatefulRedisConnection`
with the access to the sync, async and reactive interface.

3.x code:
```java
RedisConnection connection = client.connect();
```

4.x code:
```java
StatefulRedisConnection stateful = client.connect();
RedisConnection connection = stateful.sync();
```

The other `connect` methods like `connectAsync` and `connectSentinelAsync` will remain unchanged.

Affected `connect` methods are:

* `RedisClient.connect` (provides a `StatefulRedisConnection`)
* `RedisClient.connectPubSub` (provides a `StatefulRedisPubSubConnection`)
* `RedisClusterClient.connect` (provides a `StatefulRedisClusterConnection`)

New connect methods:

* `RedisClient.connectSentinel` (provides a `StatefulRedisSentinelConnection`)

Moving segregated API interfaces to own packages
-----
Starting with reactive API's, another 13 interfaces will be provided with lettuce. This increases the count of
types within the `com.lambdaworks.redis` package and the package gets messier again. In combination with the stateful connection
the original `...Connection` or `...AsyncConnection` interfaces no longer reflect the real purpose. New `Commands` interfaces provide
the same functionality and are located in `api.sync` and `api.async` packages (respective `cluster.api.sync`, `cluster.api.async` and so on
for the Redis Cluster client and PubSub).

The following interfaces are deprecated and substituted by new `...Commands` interfaces:

* RedisHashesAsyncConnection
* RedisHashesConnection
* RedisHLLAsyncConnection
* RedisHLLConnection
* RedisKeysAsyncConnection
* RedisKeysConnection
* RedisListsAsyncConnection
* RedisListsConnection
* RedisScriptingAsyncConnection
* RedisScriptingConnection
* RedisSentinelAsyncConnection
* RedisServerAsyncConnection
* RedisServerConnection
* RedisSetsAsyncConnection
* RedisSetsConnection
* RedisSortedSetsAsyncConnection
* RedisSortedSetsConnection
* RedisStringsAsyncConnection
* RedisStringsConnection
* RedisClusterConnection
* RedisConnection
* RedisClusterAsyncConnection
* RedisAsyncConnection
* BaseRedisConnection
* BaseRedisAsyncConnection


### Migration Matrix sync API:

3.x package: `com.lambdaworks.redis`
4.x package: `com.lambdaworks.redis.api.sync`


New command interfaces:

* RedisCommands
* RedisClusterCommands
* BaseRedisComands
* RedisHashCommands
* RedisHLLCommands
* RedisKeyCommands
* RedisListCommands
* RedisScriptingCommands
* RedisServerCommands
* RedisSetCommands
* RedisSortedSetCommands
* RedisStringsCommands
* RedisTransactionalCommands
* RedisPubSubCommands

### Migration Matrix async API:

3.x package: `com.lambdaworks.redis`
4.x package: `com.lambdaworks.redis.api.async`


New command interfaces:

* RedisAsyncCommands
* RedisClusterAsyncCommands
* BaseRedisAsyncCommands
* RedisHashAsyncCommands
* RedisHLLAsyncCommands
* RedisKeyAsyncCommands
* RedisListAsyncCommands
* RedisScriptingAsyncCommands
* RedisSentinelAsyncCommands
* RedisServerAsyncCommands
* RedisSetAsyncCommands
* RedisSortedSetAsyncCommands
* RedisStringAsyncCommands
* RedisTransactionalAsyncCommands
* RedisPubSubAsyncCommands


### New interfaces providing observable commands:

4.x package: `com.lambdaworks.redis.api.rx`

New interfaces:

* BaseRedisRxConnection
* RedisHashesRxConnection
* RedisHLLRxConnection
* RedisKeysRxConnection
* RedisListsRxConnection
* RedisScriptingRxConnection
* RedisSentinelRxConnection
* RedisServerRxConnection
* RedisSetsRxConnection
* RedisSortedSetsRxConnection
* RedisStringsRxConnection
* RedisTransactionalRxConnection

## New API's

* StatefulClusterConnection
* StatefulRedisPubSubConnection
* StatefulClusterConnection
* StatefulRedisSentinelConnection
* RedisPubSubAsyncConnection and RedisPubSubConnection

## API Changes

* readOnly and readWrite changed from `String` return type to `RedisFuture<String>`. The connection state is maintained by the future completion.
* Moved `CommandOutput` from `com.lambdaworks.redis.protocol` to  `com.lambdaworks.redis.output`
* Moved `SetArgs` from `com.lambdaworks.redis.protocol` to `com.lambdaworks.redis`
* All connections are `AutoCloseable` so you can handle connections using try-with-resources.
* `RedisFuture`s are based on `CompleteableFuture` and throw now any occured exception when accessing the value using `get()`.
Exceptions are passed down the `CompletionStage`s.

Enhancements
-----


Fixes
-----

Other
------


lettuce requires a minimum of Java 8 to build and run. It is tested continuously against Redis 3.0.

For complete information on lettuce see the websites:

* http://github.com/mp911de/lettuce
* http://redis.paluch.biz.