              lettuce 3.3 RELEASE NOTES

lettuce 3.3 introduces a variety of changes: It features changes to cluster support, new GEO commands for the upcoming
Redis 3.2 release and allows batching, an extension to pipelining. The documentation within the lettuce wiki was totally
overhauled. Meet the very new wiki at https://github.com/mp911de/lettuce/wiki

The test stability issue, flaky tests, was addressed by running infinite testing jobs. The issue of some tests was
missing synchronization and relying too much on timing. But the real life teaches us, not to rely on time,
rather on hard facts whether a cluster node is available or a command is really written.
The tests are improved and fail less often.


Cluster improvements
-----
lettuce's cluster support is enhanced by a couple of features. Users can obtain connection to the particular
cluster nodes by specifying the nodeId or host and port. The new methods are available on two new interfaces:

 * RedisAdvancedClusterConnection
 * RedisAdvancedClusterAsyncConnection

Example code:

    RedisAdvancedClusterAsyncConnection<String, String> connection = clusterClient.connectClusterAsync();
    RedisClusterAsyncConnection<String, String> nodeConnection = connection.getConnection("adf7f86efa42d903bcd93c5bce72397fe52e91bb");

    ...

    RedisClusterAsyncConnection<String, String> nodeConnection = connection.getConnection("localhost", 7379);


You are free to operate on these connections. The connections are bound to the nodes and do not update in case a slot
is moved to a different node or the node id is handled by a different host. Do not close the connections. Otherwise,
unpredictable behavior will occur. Keep also in mind, that the node connections are used by the cluster connection itself
to perform cluster operations: If you block one connection all other users of the cluster connection might be affected.

The cluster client handles now ASK redirecting the same way as MOVED redirection works. It's transparent for the client.
Dispatching the commands between the particular cluster connections was optimized and the performance was improved.

Another cluster-related item is the cluster topology view refreshing. Reloading the partitions was possible
since lettuce 3.0. Version 3.3 enabled the reloading on a regular basis in the background.
You're able to enable the refresh job (disabled by default) and specify the interval (defaults to 60 seconds).
The refresh is enabled by using ClusterClientOptions.

Example code:

    clusterClient.setOptions(new ClusterClientOptions.Builder()
                                     .refreshClusterView(true)
                                     .refreshPeriod(5, TimeUnit.SECONDS)
                                     .build());

    RedisAdvancedClusterAsyncConnection<String, String> clusterConnection = clusterClient.connectClusterAsync();


Pipelining
-----
Lettuce works in its async mode since the very beginning in a pipelining mode described
in http://redis.io/topics/pipelining. What is different now? lettuce performs a flush after each command invocation
on the transport. This is fine for the most use cases, but flushing can become expensive and a limiting factor
when you're bulk loading or you need batching. The async connections allow you to disable the auto-flush behavior
and flush the queued commands at the moment you want to send them over the transport:

Example code:

    RedisAsyncConnection<String, String> connection = client.connectAsync();
    connection.setAutoFlushCommands(false);

    connection.set("key", "value");
    connection.set("key2", "value2");

    connection.flushCommands();

    connection.setAutoFlushCommands(true);


Why on the async connections only? The async connections return already a handle to the result, the sync API does not.
Adding another API would require to duplicate all interfaces and cause the code to be much more complex.
Pipelining/Batching can improve your throughput.

Read more: https://github.com/mp911de/lettuce/wiki/Pipelining-and-command-flushing

Codecs
-----
lettuce 3.3 uses a dedicated String codec instance for each String connection (Standalone) instead of sharing
one String codec for all connections. Cluster connections share a String codec between the internal connections.

A new ByteArrayCodec ships with lettuce 3.3 that allows byte array connections without the need to create an own codec.

Command execution reliability
-----
A new doc describes Command execution reliability in the context of lettuce and reconnects. In general, lettuce supports
at-least-once and at-most-once semantics. The mode of operations is bound to the auto-reconnect flag in the client options.

If auto-reconnect is enabled, at-least-once semantics applies, at-most-once if auto-reconnect is disabled.

At-least-once and at-most-once are not new to lettuce. The documentation just explains how these semantics apply to lettuce.

Read more: https://github.com/mp911de/lettuce/wiki/Command-execution-reliability

Enhancements
-----
* Provide access to cluster connection using the advanced cluster API #71
* Cluster connection failover when cluster topology changes #97
* Pipelining for lettuce (or: flush after n commands) #92
* Decouple ConnectionWatchdog reconnect from timer thread #100
* Improve performance in 3.3 #90
* Add checks for arguments #69
* Use dedicated string codecs on String connections and add ByteArrayCodec #70
* Tests for command reliability docs #98

Commands
-----
* Adopt variadic EXISTS and DEBUG HTSTATS #103
* Support geo commands in lettuce 3.3 #86
* Support NX|XX|CH|INCR options in ZADD #74

Fixes
-----
* Synchronization/cross thread visibility of variables #94

Other
------
* Rework of the wiki


lettuce requires a minimum of Java 8 to build and Java 6 run. It is tested continuously against Redis 3.0.

If you need any support, meet lettuce at

* Google Group: https://groups.google.com/d/forum/lettuce-redis-client-users or lettuce-redis-client-users@googlegroups.com
* Join the chat at https://gitter.im/mp911de/lettuce
* Github Issues: https://github.com/mp911de/lettuce/issues
* Wiki: https://github.com/mp911de/lettuce/wiki