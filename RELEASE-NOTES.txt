              lettuce 4.0.Beta1 RELEASE NOTES

TBD.
- Stateful Connections
- Sync interface for PubSub
- Advanced cluster API
- Switch to Java 8 and drop 6+7 support
- Deprecate connection API's and use command apis


lettuce 4.0 is needs Java 8 and cannot be used with Java 6 or 7.

If you need any support, meet lettuce at https://gitter.im/mp911de/lettuce


Rearchitecting the API
-----
Lettuce provides right from the start two API's: Sync and async. Now comes a third one: Reactive. Behind the scenes, all commands are
executed using netty and it does not really matter, from which API you come. But the connection resources (sockets, events)
were bound to a particular API. If one wanted to use sync calls for a certain scenario, he had to create another connection to redis.

This coupling is loosed now. By calling `connect()` you will no longer get a synchronous connection, you will get a `StatefulRedisConnection`
with the access to the sync, async and reactive interface.

3.x code:
```java
RedisConnection connection = client.connect();
```

4.x code:
```java
StatefulRedisConnection stateful = client.connect();
RedisConnection connection = stateful.sync();
```

The other `connect` methods like `connectAsync` and `connectSentinelAsync` will remain unchanged.

Affected `connect` methods are:

* `RedisClient.connect` (provides a `StatefulRedisConnection`)
* `RedisClient.connectPubSub` (provides a `StatefulRedisPubSubConnection`)
* `RedisClusterClient.connect` (provides a `StatefulRedisClusterConnection`)

New connect methods:

* `RedisClient.connectSentinel` (provides a `StatefulRedisSentinelConnection`)

Moving segregated API interfaces to own packages
-----
Starting with reactive API's, another 13 interfaces will be provided with lettuce. This increases the count of
types within the `com.lambdaworks.redis` package and the package gets messier again. Therefore the segregated interfaces
are relocated to own packages.

All segregated API interfaces are moved from `com.lambdaworks.redis` to `com.lambdaworks.redis.api.(sync|async|rx)`

You need to adjust your code to access those interfaces. So if you used `com.lambdaworks.redis.RedisListsAsyncConnection`
you need to drop the import to `com.lambdaworks.redis.RedisListsAsyncConnection` and import `com.lambdaworks.redis.api.async.RedisListsAsyncConnection`
instead.

### Migration Matrix sync API:

3.x package: `com.lambdaworks.redis`
4.x package: `com.lambdaworks.redis.api.sync`


Affected interfaces:

* BaseRedisConnection
* RedisHashesConnection
* RedisHLLConnection
* RedisKeysConnection
* RedisListsConnection
* RedisScriptingConnection
* RedisServerConnection
* RedisSetsConnection
* RedisSortedSetsConnection
* RedisStringsConnection
* RedisTransactionalConnection


### Migration Matrix async API:

3.x package: `com.lambdaworks.redis`
4.x package: `com.lambdaworks.redis.api.async`


Affected interfaces:

* BaseRedisAsyncConnection
* RedisHashesAsyncConnection
* RedisHLLAsyncConnection
* RedisKeysAsyncConnection
* RedisListsAsyncConnection
* RedisScriptingAsyncConnection
* RedisSentinelAsyncConnection
* RedisServerAsyncConnection
* RedisSetsAsyncConnection
* RedisSortedSetsAsyncConnection
* RedisStringsAsyncConnection
* RedisTransactionalAsyncConnection

*API Changes*

* readOnly and readWrite changed from `String` return type to `RedisFuture<String>`. The connection state is maintained by the future completion.
* Renamed `RedisPubSubConnection` to `RedisPubSubAsyncConnection` in order to provide a synchronous interface `RedisPubSubConnection`
* Moved `CommandOutput` from `com.lambdaworks.redis.protocol` to  `com.lambdaworks.redis.output`
* Moved `SetArgs` from `com.lambdaworks.redis.protocol` to `com.lambdaworks.redis`
* All connections are `AutoCloseable` so you can handle connections using try-with-resources.

### New interfaces providing observable commands:

4.x package: `com.lambdaworks.redis.api.rx`

New interfaces:

* BaseRedisRxConnection
* RedisHashesRxConnection
* RedisHLLRxConnection
* RedisKeysRxConnection
* RedisListsRxConnection
* RedisScriptingRxConnection
* RedisSentinelRxConnection
* RedisServerRxConnection
* RedisSetsRxConnection
* RedisSortedSetsRxConnection
* RedisStringsRxConnection
* RedisTransactionalRxConnection

## New API's

* StatefulClusterConnection
* StatefulRedisPubSubConnection
* StatefulClusterConnection
* StatefulRedisSentinelConnection
* RedisPubSubAsyncConnection and RedisPubSubConnection


Enhancements
-----


Fixes
-----

Other
------


lettuce requires a minimum of Java 8 to build and run. It is tested continuously against Redis 3.0.

For complete information on lettuce see the websites:

* http://github.com/mp911de/lettuce
* http://redis.paluch.biz.