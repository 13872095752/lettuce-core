diff --git a/src/main/java/com/lambdaworks/redis/AbstractRedisClient.java b/src/main/java/com/lambdaworks/redis/AbstractRedisClient.java
index 2558a10..9b6a212 100644
--- a/src/main/java/com/lambdaworks/redis/AbstractRedisClient.java
+++ b/src/main/java/com/lambdaworks/redis/AbstractRedisClient.java
@@ -78,7 +78,6 @@ public abstract class AbstractRedisClient {
         this.unit = unit;
     }
 
-    @SuppressWarnings("unchecked")
     protected <K, V, T extends RedisAsyncConnectionImpl<K, V>> T connectAsyncImpl(final CommandHandler<K, V> handler,
             final T connection, final Supplier<SocketAddress> socketAddressSupplier, final boolean withReconnect) {
 
@@ -113,7 +112,6 @@ public abstract class AbstractRedisClient {
         connectionBuilder.commandHandler(handler).socketAddressSupplier(socketAddressSupplier).connection(connection);
     }
 
-    @SuppressWarnings("unchecked")
     protected <K, V, T extends RedisAsyncConnectionImpl<K, V>> T connectAsyncImpl(ConnectionBuilder connectionBuilder) {
 
         RedisChannelHandler<?, ?> connection = connectionBuilder.connection();
diff --git a/src/main/java/com/lambdaworks/redis/FutureSyncInvocationHandler.java b/src/main/java/com/lambdaworks/redis/FutureSyncInvocationHandler.java
index f7292cf..2410ee7 100644
--- a/src/main/java/com/lambdaworks/redis/FutureSyncInvocationHandler.java
+++ b/src/main/java/com/lambdaworks/redis/FutureSyncInvocationHandler.java
@@ -18,7 +18,7 @@ import com.lambdaworks.redis.protocol.RedisCommand;
  */
 class FutureSyncInvocationHandler<K, V> extends AbstractInvocationHandler {
 
-    private final RedisChannelHandler<K, V> connection;
+    private final RedisChannelHandler connection;
     protected long timeout;
     protected TimeUnit unit;
 
diff --git a/src/main/java/com/lambdaworks/redis/RedisCommandExecutionException.java b/src/main/java/com/lambdaworks/redis/RedisCommandExecutionException.java
index 4f443cf..14d4943 100644
--- a/src/main/java/com/lambdaworks/redis/RedisCommandExecutionException.java
+++ b/src/main/java/com/lambdaworks/redis/RedisCommandExecutionException.java
@@ -5,7 +5,6 @@ package com.lambdaworks.redis;
  * 
  * @author <a href="mailto:mpaluch@paluch.biz">Mark Paluch</a>
  */
-@SuppressWarnings("serial")
 public class RedisCommandExecutionException extends RedisException {
 
     public RedisCommandExecutionException(String msg) {
diff --git a/src/main/java/com/lambdaworks/redis/RedisConnectionException.java b/src/main/java/com/lambdaworks/redis/RedisConnectionException.java
index d3926b9..525ad3e 100644
--- a/src/main/java/com/lambdaworks/redis/RedisConnectionException.java
+++ b/src/main/java/com/lambdaworks/redis/RedisConnectionException.java
@@ -5,7 +5,6 @@ package com.lambdaworks.redis;
  * 
  * @author <a href="mailto:mpaluch@paluch.biz">Mark Paluch</a>
  */
-@SuppressWarnings("serial")
 public class RedisConnectionException extends RedisException {
 
     public RedisConnectionException(String msg) {
diff --git a/src/main/java/com/lambdaworks/redis/models/command/CommandDetail.java b/src/main/java/com/lambdaworks/redis/models/command/CommandDetail.java
index 9a4d206..984bf06 100644
--- a/src/main/java/com/lambdaworks/redis/models/command/CommandDetail.java
+++ b/src/main/java/com/lambdaworks/redis/models/command/CommandDetail.java
@@ -7,7 +7,6 @@ import java.util.Set;
  * @author <a href="mailto:mpaluch@paluch.biz">Mark Paluch</a>
  * @since 3.0
  */
-@SuppressWarnings("serial")
 public class CommandDetail implements Serializable {
 
     private String name;
diff --git a/src/main/java/com/lambdaworks/redis/models/command/CommandDetailParser.java b/src/main/java/com/lambdaworks/redis/models/command/CommandDetailParser.java
index 7b6b381..f680a44 100644
--- a/src/main/java/com/lambdaworks/redis/models/command/CommandDetailParser.java
+++ b/src/main/java/com/lambdaworks/redis/models/command/CommandDetailParser.java
@@ -15,7 +15,6 @@ import com.google.common.primitives.Ints;
  * @author <a href="mailto:mpaluch@paluch.biz">Mark Paluch</a>
  * @since 3.0
  */
-@SuppressWarnings("serial")
 public class CommandDetailParser {
 
     /**
@@ -23,7 +22,6 @@ public class CommandDetailParser {
      */
     public static final int COMMAND_INFO_SIZE = 6;
 
-    @SuppressWarnings("serial")
     protected static final Map<String, CommandDetail.Flag> FLAG_MAPPING = new HashMap<String, CommandDetail.Flag>() {
         {
             put("admin", CommandDetail.Flag.ADMIN);
diff --git a/src/main/java/com/lambdaworks/redis/output/MapOutput.java b/src/main/java/com/lambdaworks/redis/output/MapOutput.java
index e683043..f547af4 100644
--- a/src/main/java/com/lambdaworks/redis/output/MapOutput.java
+++ b/src/main/java/com/lambdaworks/redis/output/MapOutput.java
@@ -37,7 +37,6 @@ public class MapOutput<K, V> extends CommandOutput<K, V, Map<K, V>> {
     }
 
     @Override
-    @SuppressWarnings("unchecked")
     public void set(long integer) {
         if (key == null) {
             key = (K) Long.valueOf(integer);
diff --git a/src/main/java/com/lambdaworks/redis/support/AbstractCdiBean.java b/src/main/java/com/lambdaworks/redis/support/AbstractCdiBean.java
index 04d6102..ddb33c8 100644
--- a/src/main/java/com/lambdaworks/redis/support/AbstractCdiBean.java
+++ b/src/main/java/com/lambdaworks/redis/support/AbstractCdiBean.java
@@ -12,7 +12,6 @@ import javax.enterprise.inject.spi.Bean;
 import javax.enterprise.inject.spi.BeanManager;
 import javax.enterprise.inject.spi.InjectionPoint;
 
-import com.google.common.collect.ImmutableSet;
 import com.lambdaworks.redis.RedisURI;
 
 /**
@@ -34,9 +33,8 @@ abstract class AbstractCdiBean<T> implements Bean<T> {
     }
 
     @Override
-    @SuppressWarnings("unchecked")
     public Set<Type> getTypes() {
-        return (Set<Type>) ImmutableSet.of((Type) getBeanClass());
+        return (Set) Collections.singleton(getBeanClass());
     }
 
     @Override
diff --git a/src/test/java/com/lambdaworks/redis/ConnectionCommandTest.java b/src/test/java/com/lambdaworks/redis/ConnectionCommandTest.java
index 7a63ba8..fbee35c 100644
--- a/src/test/java/com/lambdaworks/redis/ConnectionCommandTest.java
+++ b/src/test/java/com/lambdaworks/redis/ConnectionCommandTest.java
@@ -91,7 +91,6 @@ public class ConnectionCommandTest extends AbstractCommandTest {
     }
 
     @Test
-    @SuppressWarnings("unchecked")
     public void isValidAsyncExceptions() throws Exception {
 
         RedisAsyncConnection<?, ?> connection = mock(RedisAsyncConnection.class);
diff --git a/src/test/java/com/lambdaworks/redis/HashCommandTest.java b/src/test/java/com/lambdaworks/redis/HashCommandTest.java
index be1191f..daadf2d 100644
--- a/src/test/java/com/lambdaworks/redis/HashCommandTest.java
+++ b/src/test/java/com/lambdaworks/redis/HashCommandTest.java
@@ -177,7 +177,7 @@ public class HashCommandTest extends AbstractCommandTest {
         redis.hset(key, "one", "1");
         redis.hset(key, "two", "2");
 
-        ListStreamingAdapter<String> channel = new ListStreamingAdapter<String>();
+        ListStreamingAdapter<String> channel = new ListStreamingAdapter();
         Long count = redis.hvals(channel, key);
         assertThat(count.intValue()).isEqualTo(2);
         assertThat(channel.getList()).hasSize(2);
diff --git a/src/test/java/com/lambdaworks/redis/PrivateAccessorTest.java b/src/test/java/com/lambdaworks/redis/PrivateAccessorTest.java
index 113d746..e0f438d 100644
--- a/src/test/java/com/lambdaworks/redis/PrivateAccessorTest.java
+++ b/src/test/java/com/lambdaworks/redis/PrivateAccessorTest.java
@@ -25,7 +25,6 @@ import com.lambdaworks.redis.protocol.LettuceCharsets;
  * @author <a href="mailto:mpaluch@paluch.biz">Mark Paluch</a>
  */
 @RunWith(Parameterized.class)
-@SuppressWarnings("unchecked")
 public class PrivateAccessorTest {
 
     private Class<?> theClass;
@@ -34,10 +33,9 @@ public class PrivateAccessorTest {
     public static List<Object[]> parameters() {
 
         List<Class<?>> classes = ImmutableList.of(LettuceStrings.class, LettuceFutures.class, LettuceCharsets.class,
-                                                  CRC16.class, SlotHash.class, Base16.class, KillArgs.Builder.class,
-                                                  SortArgs.Builder.class, ZStoreArgs.Builder.class,
-                                                  ClusterSlotsParser.class, CommandDetailParser.class, RoleParser.class,
-                                                  ClusterPartitionParser.class);
+                CRC16.class, SlotHash.class, Base16.class, KillArgs.Builder.class, SortArgs.Builder.class,
+                ZStoreArgs.Builder.class, ClusterSlotsParser.class, CommandDetailParser.class, RoleParser.class,
+                ClusterPartitionParser.class);
 
         List<Object[]> result = Lists.newArrayList();
         for (Class<?> aClass : classes) {
diff --git a/src/test/java/com/lambdaworks/redis/ScoredValueStreamingAdapter.java b/src/test/java/com/lambdaworks/redis/ScoredValueStreamingAdapter.java
index b369fb3..21d8fd4 100644
--- a/src/test/java/com/lambdaworks/redis/ScoredValueStreamingAdapter.java
+++ b/src/test/java/com/lambdaworks/redis/ScoredValueStreamingAdapter.java
@@ -9,15 +9,15 @@ import com.lambdaworks.redis.output.ScoredValueStreamingChannel;
  * @author <a href="mailto:mpaluch@paluch.biz">Mark Paluch</a>
  * @since 3.0
  */
-public class ScoredValueStreamingAdapter<T> implements ScoredValueStreamingChannel<T> {
-    private List<ScoredValue<T>> list = new ArrayList<ScoredValue<T>>();
+public class ScoredValueStreamingAdapter implements ScoredValueStreamingChannel {
+    private List<ScoredValue> list = new ArrayList<ScoredValue>();
 
     @Override
-    public void onValue(ScoredValue<T> value) {
+    public void onValue(ScoredValue value) {
         list.add(value);
     }
 
-    public List<ScoredValue<T>> getList() {
+    public List<ScoredValue> getList() {
         return list;
     }
 }
diff --git a/src/test/java/com/lambdaworks/redis/SortedSetCommandTest.java b/src/test/java/com/lambdaworks/redis/SortedSetCommandTest.java
index 58d09f0..d38d0f7 100644
--- a/src/test/java/com/lambdaworks/redis/SortedSetCommandTest.java
+++ b/src/test/java/com/lambdaworks/redis/SortedSetCommandTest.java
@@ -2,16 +2,9 @@
 
 package com.lambdaworks.redis;
 
-import static com.lambdaworks.redis.ZStoreArgs.Builder.max;
-import static com.lambdaworks.redis.ZStoreArgs.Builder.min;
-import static com.lambdaworks.redis.ZStoreArgs.Builder.sum;
-import static com.lambdaworks.redis.ZStoreArgs.Builder.weights;
-import static java.lang.Double.NEGATIVE_INFINITY;
-import static java.lang.Double.POSITIVE_INFINITY;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static com.lambdaworks.redis.ZStoreArgs.Builder.*;
+import static java.lang.Double.*;
+import static org.junit.Assert.*;
 
 import java.util.HashSet;
 import java.util.List;
@@ -100,7 +93,7 @@ public class SortedSetCommandTest extends AbstractCommandTest {
     @SuppressWarnings({ "unchecked" })
     public void zrangeWithScoresStreaming() throws Exception {
         setup();
-        ScoredValueStreamingAdapter<String> streamingAdapter = new ScoredValueStreamingAdapter<String>();
+        ScoredValueStreamingAdapter streamingAdapter = new ScoredValueStreamingAdapter();
         Long count = redis.zrangeWithScores(streamingAdapter, key, 0, -1);
         assertEquals(3, count.longValue());
         assertEquals(svlist(sv(1.0, "a"), sv(2.0, "b"), sv(3.0, "c")), streamingAdapter.getList());
@@ -227,7 +220,7 @@ public class SortedSetCommandTest extends AbstractCommandTest {
     @SuppressWarnings({ "unchecked" })
     public void zrevrangeWithScoresStreaming() throws Exception {
         setup();
-        ScoredValueStreamingAdapter<String> streamingAdapter = new ScoredValueStreamingAdapter<String>();
+        ScoredValueStreamingAdapter streamingAdapter = new ScoredValueStreamingAdapter();
         Long count = redis.zrevrangeWithScores(streamingAdapter, key, 0, -1);
         assertEquals(3, count.longValue());
         assertEquals(svlist(sv(3.0, "c"), sv(2.0, "b"), sv(1.0, "a")), streamingAdapter.getList());
@@ -276,7 +269,7 @@ public class SortedSetCommandTest extends AbstractCommandTest {
     public void zrevrangebyscoreWithScoresStreaming() throws Exception {
         redis.zadd(key, 1.0, "a", 2.0, "b", 3.0, "c", 4.0, "d");
 
-        ScoredValueStreamingAdapter<String> streamingAdapter = new ScoredValueStreamingAdapter<String>();
+        ScoredValueStreamingAdapter streamingAdapter = new ScoredValueStreamingAdapter();
 
         assertEquals(2, redis.zrevrangebyscoreWithScores(streamingAdapter, key, 3.0, 2.0).longValue());
         assertEquals(2, redis.zrevrangebyscoreWithScores(streamingAdapter, key, "(4.0", "(1.0").longValue());
diff --git a/src/test/java/com/lambdaworks/redis/cluster/ClusterCommandTest.java b/src/test/java/com/lambdaworks/redis/cluster/ClusterCommandTest.java
index 4ab61c7..2799d6c 100644
--- a/src/test/java/com/lambdaworks/redis/cluster/ClusterCommandTest.java
+++ b/src/test/java/com/lambdaworks/redis/cluster/ClusterCommandTest.java
@@ -1,15 +1,16 @@
 package com.lambdaworks.redis.cluster;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.*;
 
 import java.util.List;
+import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 
+import com.google.common.collect.Lists;
+import com.google.common.util.concurrent.MoreExecutors;
 import org.junit.Before;
 import org.junit.Test;
 
-import com.google.common.collect.Lists;
-import com.google.common.util.concurrent.MoreExecutors;
 import com.lambdaworks.redis.codec.Utf8StringCodec;
 import com.lambdaworks.redis.output.StatusOutput;
 import com.lambdaworks.redis.protocol.Command;
@@ -17,13 +18,12 @@ import com.lambdaworks.redis.protocol.CommandType;
 
 public class ClusterCommandTest {
 
-    private ClusterCommand<String, String, String> sut;
-    private Command<String, String, String> command = new Command<String, String, String>(CommandType.TYPE,
-            new StatusOutput<String, String>(new Utf8StringCodec()), null);
+    private ClusterCommand sut;
+    private Command command = new Command(CommandType.TYPE, new StatusOutput(new Utf8StringCodec()), null);
 
     @Before
     public void before() throws Exception {
-        sut = new ClusterCommand<String, String, String>(command, null, 1);
+        sut = new ClusterCommand(command, null, 1);
     }
 
     @Test
@@ -52,12 +52,15 @@ public class ClusterCommandTest {
     }
 
     @Test
-    public void testCompleteListener() throws Exception {
+    public void testCompleteListener() throws Exception
+    {
 
-        final List<String> someList = Lists.newArrayList();
-        sut.addListener(new Runnable() {
+        final List someList = Lists.newArrayList();
+        sut.addListener(new Runnable()
+        {
             @Override
-            public void run() {
+            public void run()
+            {
                 someList.add("");
             }
         }, MoreExecutors.sameThreadExecutor());
diff --git a/src/test/java/com/lambdaworks/redis/cluster/ClusterRule.java b/src/test/java/com/lambdaworks/redis/cluster/ClusterRule.java
index e62d9e0..b34280f 100644
--- a/src/test/java/com/lambdaworks/redis/cluster/ClusterRule.java
+++ b/src/test/java/com/lambdaworks/redis/cluster/ClusterRule.java
@@ -24,7 +24,7 @@ public class ClusterRule implements TestRule {
 
     private RedisClusterClient clusterClient;
     private int[] ports;
-    private Map<Integer, RedisAsyncConnectionImpl<?, ?>> connectionCache = Maps.newHashMap();
+    private Map<Integer, RedisAsyncConnectionImpl> connectionCache = Maps.newHashMap();
 
     public ClusterRule(RedisClusterClient clusterClient, int... ports) {
         this.clusterClient = clusterClient;
@@ -45,7 +45,7 @@ public class ClusterRule implements TestRule {
             public void evaluate() throws Throwable {
                 List<Future> futures = Lists.newArrayList();
 
-                for (RedisAsyncConnection<?, ?> connection : connectionCache.values()) {
+                for (RedisAsyncConnection connection : connectionCache.values()) {
                     futures.add(connection.flushall());
                 }
 
@@ -88,7 +88,7 @@ public class ClusterRule implements TestRule {
 
             }
         } catch (Exception e) {
-            // nothing to do
+
         } finally {
             connection.close();
         }
@@ -98,7 +98,7 @@ public class ClusterRule implements TestRule {
 
     public void flushdb() {
         try {
-            for (RedisAsyncConnection<?, ?> connection : connectionCache.values()) {
+            for (RedisAsyncConnection connection : connectionCache.values()) {
                 connection.flushdb().get();
             }
         } catch (Exception e) {
@@ -109,7 +109,7 @@ public class ClusterRule implements TestRule {
     public void clusterReset() {
         try {
 
-            for (RedisAsyncConnectionImpl<?, ?> connection : connectionCache.values()) {
+            for (RedisAsyncConnectionImpl connection : connectionCache.values()) {
                 connection.clusterReset(false).get();
                 connection.clusterReset(true).get();
                 connection.clusterFlushslots().get();
diff --git a/src/test/java/com/lambdaworks/redis/cluster/RedisClusterSetupTest.java b/src/test/java/com/lambdaworks/redis/cluster/RedisClusterSetupTest.java
index 94fd471..7e37427 100644
--- a/src/test/java/com/lambdaworks/redis/cluster/RedisClusterSetupTest.java
+++ b/src/test/java/com/lambdaworks/redis/cluster/RedisClusterSetupTest.java
@@ -25,7 +25,6 @@ import com.lambdaworks.redis.cluster.models.partitions.RedisClusterNode;
  * @author <a href="mailto:mpaluch@paluch.biz">Mark Paluch</a>
  * @since 3.0
  */
-@SuppressWarnings("unchecked")
 public class RedisClusterSetupTest {
     public static final String host = TestSettings.hostAddr();
     public static final int port1 = 7383;
@@ -57,8 +56,8 @@ public class RedisClusterSetupTest {
 
     @Before
     public void openConnection() throws Exception {
-        redis1 = (RedisClusterConnection<String, String>) client1.connect();
-        redis2 = (RedisClusterConnection<String, String>) client2.connect();
+        redis1 = (RedisClusterConnection) client1.connect();
+        redis2 = (RedisClusterConnection) client2.connect();
         clusterRule.clusterReset();
     }
 
diff --git a/src/test/java/com/lambdaworks/redis/cluster/models/slots/ClusterSlotsParserTest.java b/src/test/java/com/lambdaworks/redis/cluster/models/slots/ClusterSlotsParserTest.java
index d94151f..f47d882 100644
--- a/src/test/java/com/lambdaworks/redis/cluster/models/slots/ClusterSlotsParserTest.java
+++ b/src/test/java/com/lambdaworks/redis/cluster/models/slots/ClusterSlotsParserTest.java
@@ -10,7 +10,6 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.net.HostAndPort;
 
-@SuppressWarnings("unchecked")
 public class ClusterSlotsParserTest {
 
     @Test
diff --git a/src/test/java/com/lambdaworks/redis/protocol/CommandHandlerTest.java b/src/test/java/com/lambdaworks/redis/protocol/CommandHandlerTest.java
index 7061058..3ac1ef4 100644
--- a/src/test/java/com/lambdaworks/redis/protocol/CommandHandlerTest.java
+++ b/src/test/java/com/lambdaworks/redis/protocol/CommandHandlerTest.java
@@ -1,8 +1,8 @@
 package com.lambdaworks.redis.protocol;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.*;
 import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.*;
 
 import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.BlockingQueue;
@@ -19,9 +19,9 @@ import io.netty.channel.ChannelHandlerContext;
 @RunWith(MockitoJUnitRunner.class)
 public class CommandHandlerTest {
 
-    private BlockingQueue<RedisCommand<String, String, ?>> q = new ArrayBlockingQueue<RedisCommand<String, String, ?>>(10);
+    private BlockingQueue<RedisCommand> q = new ArrayBlockingQueue<RedisCommand>(10);
 
-    private CommandHandler<String, String> sut = new CommandHandler<String, String>(q);
+    private CommandHandler sut = new CommandHandler(q);
 
     @Mock
     private ChannelHandlerContext context;
@@ -36,8 +36,7 @@ public class CommandHandlerTest {
     public void testExceptionWithQueue() throws Exception {
         q.clear();
 
-        Command<String, String, String> command = new Command<String, String, String>(CommandType.APPEND,
-                new StatusOutput<String, String>(new Utf8StringCodec()), null);
+        Command command = new Command(CommandType.APPEND, new StatusOutput(new Utf8StringCodec()), null);
         q.add(command);
         sut.exceptionCaught(context, new Exception());
 
diff --git a/src/test/java/com/lambdaworks/redis/support/PoolingProxyFactoryTest.java b/src/test/java/com/lambdaworks/redis/support/PoolingProxyFactoryTest.java
index 11d85ed..9fa08a6 100644
--- a/src/test/java/com/lambdaworks/redis/support/PoolingProxyFactoryTest.java
+++ b/src/test/java/com/lambdaworks/redis/support/PoolingProxyFactoryTest.java
@@ -16,7 +16,7 @@ public class PoolingProxyFactoryTest extends AbstractCommandTest {
     public void testCreateDefault() throws Exception {
 
         RedisConnectionPool<RedisConnection<String, String>> pool = client.pool();
-        RedisConnection<String, String> connection = PoolingProxyFactory.create(pool);
+        RedisConnection<String, String> connection = (RedisConnection<String, String>) PoolingProxyFactory.create(pool);
 
         connection.set("a", "b");
         connection.set("x", "y");
@@ -38,7 +38,7 @@ public class PoolingProxyFactoryTest extends AbstractCommandTest {
     @Test
     public void testCreate() throws Exception {
 
-        RedisConnection<String, String> connection = PoolingProxyFactory
+        RedisConnection<String, String> connection = (RedisConnection<String, String>) PoolingProxyFactory
                 .create(client.pool());
 
         connection.set("a", "b");
